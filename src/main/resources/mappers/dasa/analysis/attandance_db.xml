<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="attandance">
    <select id="selectListCount" parameterType="com.vertexid.vo.NaviVo" resultType="integer">
          select 
		  		 count(*)
		  from tb_emp_attandance A, tb_code B, tb_empl_manage C
		  where A.dty_code = B.c_code 
		   and A.ea_em_no = C.em_no
		   and ea_yy = #{params.ea_yy}
		    and ea_mm = #{params.ea_mm}
		    <if test="params.cm_code != null and !params.cm_code.equals('')">
		    and A.cm_code = #{params.cm_code}
		    </if>
		    <if test="params.bhf_code != null and !params.bhf_code.equals('')">
		    and A.bhf_code = #{params.bhf_code}
		    </if>
		    <if test="params.dty_code != null and !params.dty_code.equals('')">
		    and A.dty_code = #{params.dty_code}
		    </if>
		    <if test="params.ea_em_no != null and !params.ea_em_no.equals('')">
		    and C.em_id = #{params.ea_em_no}
		    </if>
		    <if test="params.ea_em_nm != null and !params.ea_em_nm.equals('')">
		    and ea_em_nm like '%${params.ea_em_nm}%'
		    
		    and A.bhf_code != '05262'
		    and (C.use_at='Y' or(C.use_at ='N' AND C.em_retire_de &gt;= concat(#{params.ea_yy}, #{params.ea_pre_mm}, '15')))
		    </if>
    </select>

    <select id="selectList" resultType="com.dasa.analysis.vo.AttandanceVo" parameterType="com.vertexid.vo.NaviVo">
        ${pagingStart}
          select 
			   A.ea_yy
			  ,A.ea_mm
			  ,C.em_id as ea_em_no
			  ,A.ea_em_nm
			  ,A.cm_code
			  ,A.bhf_code
			  ,D.om_nm as bhf_name
			  ,A.team_code
			  ,A.dty_code
			  ,B.c_name as dty_name
			  ,date_format(A.em_ecny_de,'%Y-%m-%d')  as em_ecny_de
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_01, concat(#{params.ea_yy}, #{params.ea_mm}, '01')) AS ea_day_01
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_02, concat(#{params.ea_yy}, #{params.ea_mm}, '02')) AS ea_day_02
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_03, concat(#{params.ea_yy}, #{params.ea_mm}, '03')) AS ea_day_03
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_04, concat(#{params.ea_yy}, #{params.ea_mm}, '04')) AS ea_day_04
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_05, concat(#{params.ea_yy}, #{params.ea_mm}, '05')) AS ea_day_05
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_06, concat(#{params.ea_yy}, #{params.ea_mm}, '06')) AS ea_day_06
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_07, concat(#{params.ea_yy}, #{params.ea_mm}, '07')) AS ea_day_07
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_08, concat(#{params.ea_yy}, #{params.ea_mm}, '08')) AS ea_day_08
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_09, concat(#{params.ea_yy}, #{params.ea_mm}, '09')) AS ea_day_09
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_10, concat(#{params.ea_yy}, #{params.ea_mm}, '10')) AS ea_day_10
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_11, concat(#{params.ea_yy}, #{params.ea_mm}, '11')) AS ea_day_11
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_12, concat(#{params.ea_yy}, #{params.ea_mm}, '12')) AS ea_day_12
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_13, concat(#{params.ea_yy}, #{params.ea_mm}, '13')) AS ea_day_13
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_14, concat(#{params.ea_yy}, #{params.ea_mm}, '14')) AS ea_day_14
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_15, concat(#{params.ea_yy}, #{params.ea_mm}, '15')) AS ea_day_15
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_16, concat(#{params.ea_pre_yy}, #{params.ea_pre_mm}, '16')) AS ea_day_16
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_17, concat(#{params.ea_pre_yy}, #{params.ea_pre_mm}, '17')) AS ea_day_17
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_18, concat(#{params.ea_pre_yy}, #{params.ea_pre_mm}, '18')) AS ea_day_18
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_19, concat(#{params.ea_pre_yy}, #{params.ea_pre_mm}, '19')) AS ea_day_19
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_20, concat(#{params.ea_pre_yy}, #{params.ea_pre_mm}, '20')) AS ea_day_20
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_21, concat(#{params.ea_pre_yy}, #{params.ea_pre_mm}, '21')) AS ea_day_21
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_22, concat(#{params.ea_pre_yy}, #{params.ea_pre_mm}, '22')) AS ea_day_22
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_23, concat(#{params.ea_pre_yy}, #{params.ea_pre_mm}, '23')) AS ea_day_23
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_24, concat(#{params.ea_pre_yy}, #{params.ea_pre_mm}, '24')) AS ea_day_24
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_25, concat(#{params.ea_pre_yy}, #{params.ea_pre_mm}, '25')) AS ea_day_25
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_26, concat(#{params.ea_pre_yy}, #{params.ea_pre_mm}, '26')) AS ea_day_26
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_27, concat(#{params.ea_pre_yy}, #{params.ea_pre_mm}, '27')) AS ea_day_27
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_28, concat(#{params.ea_pre_yy}, #{params.ea_pre_mm}, '28')) AS ea_day_28
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_29, concat(#{params.ea_pre_yy}, #{params.ea_pre_mm}, '29')) AS ea_day_29
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_30, concat(#{params.ea_pre_yy}, #{params.ea_pre_mm}, '30')) AS ea_day_30
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_31, concat(#{params.ea_pre_yy}, #{params.ea_pre_mm}, '31')) AS ea_day_31
			  ,ea_std_work_days
			  ,ea_holidays
			  ,ea_weekdays_work
			  ,ea_holidays_work
			  ,ea_work_overtime
			  ,ea_actual_work_days
			  ,ea_base_time
			  ,ea_absent_days
			  ,ea_annual_leave
			  ,ea_summer_holidays
			  ,ea_cc_leave
			  ,ea_education
			  ,ea_sick_leave
			  ,FORMAT(ea_std_trans_fee, 0)  as ea_std_trans_fee
			  ,FORMAT(ea_trans_fee, 0) as ea_trans_fee
			  ,ea_etc
			  ,ea_etc_memo
			  ,A.regist_de
		  from tb_emp_attandance A, tb_code B, tb_empl_manage C, tb_orgnzt_manage D
		  where A.dty_code = B.c_code 
		   and A.ea_em_no = C.em_no
		   and A.bhf_code = D.om_code
		   and ea_yy = #{params.ea_yy}
		   and ea_mm = #{params.ea_mm}
		    
		    <if test="params.cm_code != null and !params.cm_code.equals('')">
		    and A.cm_code = #{params.cm_code}
		    </if>
		    <if test="params.bhf_code != null and !params.bhf_code.equals('')">
		    and A.bhf_code = #{params.bhf_code}
		    </if>
		    <if test="params.dty_code != null and !params.dty_code.equals('')">
		    and A.dty_code = #{params.dty_code}
		    </if>
		    <if test="params.ea_em_no != null and !params.ea_em_no.equals('')">
		    and C.em_id = #{params.ea_em_no}
		    </if>
		    <if test="params.ea_em_nm != null and !params.ea_em_nm.equals('')">
		    and ea_em_nm like '%${params.ea_em_nm}%'
		    </if>
		    
		    and A.bhf_code != '05262'  <!-- M20161201 k2s test경기지점 제외 처리  -->
		    and (C.use_at='Y' or(C.use_at ='N' AND C.em_retire_de &gt; concat(#{params.ea_yy}, #{params.ea_mm}, '15'))) <!-- M20170412 kks 근태일 당월기준 16일 익월 15일 익월에 대한 근태일이 됨 -->
		    <!-- and (C.use_at='Y' or(C.use_at ='N' AND C.em_retire_de &gt;= concat(#{params.ea_yy}, #{params.ea_mm}, '15')))  -->
		    <!--  and (C.use_at='Y' or (C.use_at ='N' AND C.em_retire_de BETWEEN concat(#{params.ea_pre_yy}, #{params.ea_pre_mm}, '16') AND concat(#{params.ea_yy}, #{params.ea_mm}, '15') )) -->
		  order by bhf_name, dty_code desc, em_ecny_de, ea_em_nm <!-- M20161201 k2s 정렬순서 수정 지점, 직무(팀장, 순회, 고정), 입사일자 순 -->
        ${pagingEnd}
    </select>
    
    <select id="selectAllList" resultType="com.dasa.analysis.vo.AttandanceVo" parameterType="com.dasa.analysis.vo.AttandanceVo">
          select 
			   A.ea_yy
			  ,A.ea_mm
			  ,C.em_id as ea_em_no
			  ,A.ea_em_nm
			  ,A.cm_code
			  ,A.bhf_code
			  ,D.om_nm as bhf_name
			  ,A.team_code
			  ,A.dty_code
			  ,replace(B.c_name, '여사원', '') as dty_name
			  ,date_format(A.em_ecny_de,'%Y-%m-%d')  as em_ecny_de
			  
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_01, concat(#{ea_yy}, #{ea_mm}, '01')) AS ea_day_01
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_02, concat(#{ea_yy}, #{ea_mm}, '02')) AS ea_day_02
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_03, concat(#{ea_yy}, #{ea_mm}, '03')) AS ea_day_03
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_04, concat(#{ea_yy}, #{ea_mm}, '04')) AS ea_day_04
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_05, concat(#{ea_yy}, #{ea_mm}, '05')) AS ea_day_05
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_06, concat(#{ea_yy}, #{ea_mm}, '06')) AS ea_day_06
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_07, concat(#{ea_yy}, #{ea_mm}, '07')) AS ea_day_07
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_08, concat(#{ea_yy}, #{ea_mm}, '08')) AS ea_day_08
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_09, concat(#{ea_yy}, #{ea_mm}, '09')) AS ea_day_09
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_10, concat(#{ea_yy}, #{ea_mm}, '10')) AS ea_day_10
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_11, concat(#{ea_yy}, #{ea_mm}, '11')) AS ea_day_11
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_12, concat(#{ea_yy}, #{ea_mm}, '12')) AS ea_day_12
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_13, concat(#{ea_yy}, #{ea_mm}, '13')) AS ea_day_13
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_14, concat(#{ea_yy}, #{ea_mm}, '14')) AS ea_day_14
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_15, concat(#{ea_yy}, #{ea_mm}, '15')) AS ea_day_15
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_16, concat(#{ea_pre_yy}, #{ea_pre_mm}, '16')) AS ea_day_16
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_17, concat(#{ea_pre_yy}, #{ea_pre_mm}, '17')) AS ea_day_17
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_18, concat(#{ea_pre_yy}, #{ea_pre_mm}, '18')) AS ea_day_18
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_19, concat(#{ea_pre_yy}, #{ea_pre_mm}, '19')) AS ea_day_19
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_20, concat(#{ea_pre_yy}, #{ea_pre_mm}, '20')) AS ea_day_20
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_21, concat(#{ea_pre_yy}, #{ea_pre_mm}, '21')) AS ea_day_21
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_22, concat(#{ea_pre_yy}, #{ea_pre_mm}, '22')) AS ea_day_22
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_23, concat(#{ea_pre_yy}, #{ea_pre_mm}, '23')) AS ea_day_23
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_24, concat(#{ea_pre_yy}, #{ea_pre_mm}, '24')) AS ea_day_24
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_25, concat(#{ea_pre_yy}, #{ea_pre_mm}, '25')) AS ea_day_25
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_26, concat(#{ea_pre_yy}, #{ea_pre_mm}, '26')) AS ea_day_26
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_27, concat(#{ea_pre_yy}, #{ea_pre_mm}, '27')) AS ea_day_27
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_28, concat(#{ea_pre_yy}, #{ea_pre_mm}, '28')) AS ea_day_28
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_29, concat(#{ea_pre_yy}, #{ea_pre_mm}, '29')) AS ea_day_29
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_30, concat(#{ea_pre_yy}, #{ea_pre_mm}, '30')) AS ea_day_30
			  ,fn_get_attandance_new(A.bhf_code, ea_em_no, A.dty_code, ea_day_31, concat(#{ea_pre_yy}, #{ea_pre_mm}, '31')) AS ea_day_31
			  
			  ,ea_std_work_days
			  ,ea_holidays
			  ,ea_weekdays_work
			  ,ea_holidays_work
			  ,ea_work_overtime
			  ,ea_actual_work_days
			  ,ea_base_time
			  ,ea_absent_days
			  ,ea_annual_leave
			  ,ea_summer_holidays
			  ,ea_cc_leave
			  ,ea_education
			  ,ea_sick_leave
			  ,FORMAT(ea_std_trans_fee, 0) as ea_std_trans_fee 
			  ,FORMAT(ea_trans_fee, 0) as ea_trans_fee
			  ,ea_etc
			  ,ea_etc_memo
			  ,A.regist_de
		  from tb_emp_attandance A, tb_code B, tb_empl_manage C, tb_orgnzt_manage D
		  where A.dty_code = B.c_code 
		   and A.ea_em_no = C.em_no
		   and ea_yy = #{ea_yy}
		   and ea_mm = #{ea_mm}
		   and A.bhf_code = D.om_code
		    
		    <if test="cm_code != null and !cm_code.equals('')">
		    and A.cm_code = #{cm_code}
		    </if>
		    <if test="bhf_code != null and !bhf_code.equals('')">
		    and A.bhf_code = #{bhf_code}
		    </if>
		    <if test="dty_code != null and !dty_code.equals('')">
		    and A.dty_code = #{dty_code}
		    </if>
		    <if test="ea_em_no != null and !ea_em_no.equals('')">
		    and C.em_id = #{ea_em_no}
		    </if>
		    <if test="ea_em_nm != null and !ea_em_nm.equals('')">
		    and ea_em_nm like '%${ea_em_nm}%'
		    </if>
		    
		    and A.bhf_code != '05262'  <!-- M20170125 k2s test경기지점 제외 처리  -->
		    and (C.use_at='Y' or(C.use_at ='N' AND C.em_retire_de &gt;= concat(#{ea_yy}, #{ea_mm}, '15'))) 
		  order by bhf_name, dty_code desc, em_ecny_de, ea_em_nm <!-- M20170125 k2s 정렬순서 수정 지점, 직무(팀장, 순회, 고정), 입사일자 순 -->		    

    </select>
    
    <update id="sp_summary_emp_attandance"   parameterType="com.dasa.analysis.vo.AttandanceVo" statementType="CALLABLE">
        {call sp_summary_emp_attandance(
        	  	#{ea_yy          , mode=IN, jdbcType=VARCHAR, javaType=string}
        	  ,	#{ea_mm          , mode=IN, jdbcType=VARCHAR, javaType=string}
        	  ,	#{ea_pre_yy      , mode=IN, jdbcType=VARCHAR, javaType=string}
        	  ,	#{ea_pre_mm      , mode=IN, jdbcType=VARCHAR, javaType=string}
        )}
    </update>
    
    <!-- A20170921 K2S --> 
    <select id="selectempMonthListCount" parameterType="com.vertexid.vo.NaviVo" resultType="integer">
          select count(A.ea_em_no) cnt
		  from tb_emp_attandance_month A, tb_code B, tb_empl_manage C
		  where A.ea_yy        = #{params.ea_yy} 
		    and A.ea_mm        = #{params.ea_mm}
		    and A.dty_code     = B.c_code
		    and A.ea_em_no     = C.em_no
		    <!-- M20180117 M20180118 k2s 퇴사대상자가 포함한 월은 퇴사자의 사원근무실적이 조회 될 수 있어야 함 다사마케팅(전동국과장) 요청 -->
		    <![CDATA[
		    and (C.use_at ='Y' or (C.use_at ='N' and substr(C.em_retire_de,1,6) between concat(#{params.ea_yy},#{params.ea_mm}) and date_format(now(), '%Y%m'))
		                       or (C.use_at ='N' and substr(C.em_retire_de,1,6) > date_format(now(), '%Y%m'))
		         )
		    ]]>
		    and A.bhf_code     != '05262' <!-- k2s test경기지점 제외 처리  -->
		    and A.ea_em_nm not in ('순회일','순회이','고정일','고정이') <!-- k2s 임의의 사원으로 '순회일','순회이','고정일','고정이'는 예외처리 함  -->
		    <if test="params.cm_code != null and !params.cm_code.equals('')">
		    and A.cm_code       = #{params.cm_code}
		    </if>
		    <if test="params.bhf_code != null and !params.bhf_code.equals('')">
		    and A.bhf_code      = #{params.bhf_code}
		    </if>
		    <if test="params.dty_code != null and !params.dty_code.equals('')">
		    and A.dty_code      = #{params.dty_code}
		    </if>
		    <if test="params.ea_em_no != null and !params.ea_em_no.equals('')">
		    and C.em_id         = #{params.ea_em_no}
		    </if>
		    <if test="params.ea_em_nm != null and !params.ea_em_nm.equals('')">
		    and A.ea_em_nm   like '%${params.ea_em_nm}%'
		    </if>
		    	
    </select>    
    
    <!-- A20170921 K2S --> 
    <select id="selectempMonthList" resultType="com.dasa.analysis.vo.AttandanceVo" parameterType="com.vertexid.vo.NaviVo">
        ${pagingStart}
        select 
			   A.ea_yy
			  ,A.ea_mm
			  ,C.em_id     as ea_em_no
			  ,A.ea_em_nm  as ea_em_nm
			  ,A.cm_code
			  ,A.bhf_code
			  ,D.om_nm     as bhf_name
			  ,A.team_code
			  ,A.dty_code  as dty_code
			  ,B.c_name    as dty_name
			  ,date_format(A.em_ecny_de,'%Y-%m-%d')  as em_ecny_de
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_01, concat(#{params.ea_yy}, #{params.ea_mm}, '01')) AS ea_day_01
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_02, concat(#{params.ea_yy}, #{params.ea_mm}, '02')) AS ea_day_02
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_03, concat(#{params.ea_yy}, #{params.ea_mm}, '03')) AS ea_day_03
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_04, concat(#{params.ea_yy}, #{params.ea_mm}, '04')) AS ea_day_04
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_05, concat(#{params.ea_yy}, #{params.ea_mm}, '05')) AS ea_day_05
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_06, concat(#{params.ea_yy}, #{params.ea_mm}, '06')) AS ea_day_06
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_07, concat(#{params.ea_yy}, #{params.ea_mm}, '07')) AS ea_day_07
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_08, concat(#{params.ea_yy}, #{params.ea_mm}, '08')) AS ea_day_08
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_09, concat(#{params.ea_yy}, #{params.ea_mm}, '09')) AS ea_day_09
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_10, concat(#{params.ea_yy}, #{params.ea_mm}, '10')) AS ea_day_10
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_11, concat(#{params.ea_yy}, #{params.ea_mm}, '11')) AS ea_day_11
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_12, concat(#{params.ea_yy}, #{params.ea_mm}, '12')) AS ea_day_12
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_13, concat(#{params.ea_yy}, #{params.ea_mm}, '13')) AS ea_day_13
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_14, concat(#{params.ea_yy}, #{params.ea_mm}, '14')) AS ea_day_14
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_15, concat(#{params.ea_yy}, #{params.ea_mm}, '15')) AS ea_day_15
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_16, concat(#{params.ea_yy}, #{params.ea_mm}, '16')) AS ea_day_16
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_17, concat(#{params.ea_yy}, #{params.ea_mm}, '17')) AS ea_day_17
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_18, concat(#{params.ea_yy}, #{params.ea_mm}, '18')) AS ea_day_18
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_19, concat(#{params.ea_yy}, #{params.ea_mm}, '19')) AS ea_day_19
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_20, concat(#{params.ea_yy}, #{params.ea_mm}, '20')) AS ea_day_20
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_21, concat(#{params.ea_yy}, #{params.ea_mm}, '21')) AS ea_day_21
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_22, concat(#{params.ea_yy}, #{params.ea_mm}, '22')) AS ea_day_22
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_23, concat(#{params.ea_yy}, #{params.ea_mm}, '23')) AS ea_day_23
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_24, concat(#{params.ea_yy}, #{params.ea_mm}, '24')) AS ea_day_24
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_25, concat(#{params.ea_yy}, #{params.ea_mm}, '25')) AS ea_day_25
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_26, concat(#{params.ea_yy}, #{params.ea_mm}, '26')) AS ea_day_26
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_27, concat(#{params.ea_yy}, #{params.ea_mm}, '27')) AS ea_day_27
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_28, concat(#{params.ea_yy}, #{params.ea_mm}, '28')) AS ea_day_28
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_29, concat(#{params.ea_yy}, #{params.ea_mm}, '29')) AS ea_day_29
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_30, concat(#{params.ea_yy}, #{params.ea_mm}, '30')) AS ea_day_30
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_31, concat(#{params.ea_yy}, #{params.ea_mm}, '31')) AS ea_day_31
			  ,A.ea_std_work_days
			  ,A.ea_holidays
			  ,A.ea_weekdays_work
			  ,A.ea_holidays_work
			  ,A.ea_work_overtime
			  ,A.ea_actual_work_days
			  ,A.ea_base_time
			  ,A.ea_absent_days
			  ,A.ea_annual_leave
			  ,A.ea_summer_holidays
			  ,A.ea_cc_leave
			  ,A.ea_education
			  ,A.ea_sick_leave
			  ,FORMAT(A.ea_std_trans_fee, 0)  as ea_std_trans_fee
			  ,FORMAT(A.ea_trans_fee, 0)      as ea_trans_fee
			  ,A.ea_etc
			  ,A.ea_etc_memo
			  ,A.regist_de
		  from tb_emp_attandance_month A, tb_code B, tb_empl_manage C, tb_orgnzt_manage D
		  where A.ea_yy       = #{params.ea_yy}
		    and A.ea_mm       = #{params.ea_mm}		   
		    and A.dty_code    = B.c_code 
		    and A.ea_em_no    = C.em_no
		    and A.bhf_code    = D.om_code
		    <!-- M20180117 M20180118 k2s 퇴사대상자가 포함한 월은 퇴사자의 사원근무실적이 조회 될 수 있어야 함 다사마케팅(전동국과장) 요청 -->
		    <![CDATA[
		    and (C.use_at ='Y' or (C.use_at ='N' and substr(C.em_retire_de,1,6) between concat(#{params.ea_yy},#{params.ea_mm}) and date_format(now(), '%Y%m'))
		                       or (C.use_at ='N' and substr(C.em_retire_de,1,6) > date_format(now(), '%Y%m'))
		         )
		    ]]>
		   and A.ea_em_nm not in ('순회일','순회이','고정일','고정이')  <!-- k2s 임의의 사원으로 '순회일','순회이','고정일','고정이'는 예외처리 함  -->
		   and A.bhf_code     != '05262'                               <!-- k2s test경기지점 제외 처리  -->
		   
		   <if test="params.cm_code != null and !params.cm_code.equals('')">
		   and A.cm_code     = #{params.cm_code}
		   </if>
		   <if test="params.bhf_code != null and !params.bhf_code.equals('')">
		   and A.bhf_code    = #{params.bhf_code}
		   </if>
		   <if test="params.dty_code != null and !params.dty_code.equals('')">
		   and A.dty_code    = #{params.dty_code}
		   </if>
		   <if test="params.ea_em_no != null and !params.ea_em_no.equals('')">
		   and C.em_id       = #{params.ea_em_no}
		   </if>
		   <if test="params.ea_em_nm != null and !params.ea_em_nm.equals('')">
		   and A.ea_em_nm like '%${params.ea_em_nm}%'
		   </if>
		   
		  order by bhf_name, dty_code desc, em_ecny_de, ea_em_nm <!-- M20161201 k2s 정렬순서 수정 지점, 직무(팀장, 순회, 고정), 입사일자 순 -->
        ${pagingEnd}
    </select>
    
    <select id="selectExcelExportEmpMonth" resultType="com.dasa.analysis.vo.AttandanceVo" parameterType="com.dasa.analysis.vo.AttandanceVo">
    <![CDATA[
          select 
			   A.ea_yy
			  ,A.ea_mm
			  ,C.em_id     as ea_em_no
			  ,A.ea_em_nm
			  ,A.cm_code
			  ,A.bhf_code
			  ,D.om_nm     as bhf_name
			  ,A.team_code
			  ,A.dty_code  as dty_code 
			  ,replace(B.c_name, '여사원', '')       as dty_name
			  ,date_format(A.em_ecny_de,'%Y-%m-%d')  as em_ecny_de
			  
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_01, concat(#{ea_yy}, #{ea_mm}, '01')) AS ea_day_01
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_02, concat(#{ea_yy}, #{ea_mm}, '02')) AS ea_day_02
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_03, concat(#{ea_yy}, #{ea_mm}, '03')) AS ea_day_03
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_04, concat(#{ea_yy}, #{ea_mm}, '04')) AS ea_day_04
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_05, concat(#{ea_yy}, #{ea_mm}, '05')) AS ea_day_05
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_06, concat(#{ea_yy}, #{ea_mm}, '06')) AS ea_day_06
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_07, concat(#{ea_yy}, #{ea_mm}, '07')) AS ea_day_07
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_08, concat(#{ea_yy}, #{ea_mm}, '08')) AS ea_day_08
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_09, concat(#{ea_yy}, #{ea_mm}, '09')) AS ea_day_09
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_10, concat(#{ea_yy}, #{ea_mm}, '10')) AS ea_day_10
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_11, concat(#{ea_yy}, #{ea_mm}, '11')) AS ea_day_11
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_12, concat(#{ea_yy}, #{ea_mm}, '12')) AS ea_day_12
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_13, concat(#{ea_yy}, #{ea_mm}, '13')) AS ea_day_13
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_14, concat(#{ea_yy}, #{ea_mm}, '14')) AS ea_day_14
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_15, concat(#{ea_yy}, #{ea_mm}, '15')) AS ea_day_15
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_16, concat(#{ea_yy}, #{ea_mm}, '16')) AS ea_day_16
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_17, concat(#{ea_yy}, #{ea_mm}, '17')) AS ea_day_17
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_18, concat(#{ea_yy}, #{ea_mm}, '18')) AS ea_day_18
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_19, concat(#{ea_yy}, #{ea_mm}, '19')) AS ea_day_19
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_20, concat(#{ea_yy}, #{ea_mm}, '20')) AS ea_day_20
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_21, concat(#{ea_yy}, #{ea_mm}, '21')) AS ea_day_21
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_22, concat(#{ea_yy}, #{ea_mm}, '22')) AS ea_day_22
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_23, concat(#{ea_yy}, #{ea_mm}, '23')) AS ea_day_23
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_24, concat(#{ea_yy}, #{ea_mm}, '24')) AS ea_day_24
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_25, concat(#{ea_yy}, #{ea_mm}, '25')) AS ea_day_25
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_26, concat(#{ea_yy}, #{ea_mm}, '26')) AS ea_day_26
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_27, concat(#{ea_yy}, #{ea_mm}, '27')) AS ea_day_27
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_28, concat(#{ea_yy}, #{ea_mm}, '28')) AS ea_day_28
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_29, concat(#{ea_yy}, #{ea_mm}, '29')) AS ea_day_29
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_30, concat(#{ea_yy}, #{ea_mm}, '30')) AS ea_day_30
			  ,fn_get_attandance_new(A.bhf_code, A.ea_em_no, A.dty_code, A.ea_day_31, concat(#{ea_yy}, #{ea_mm}, '31')) AS ea_day_31
			  
			  ,A.ea_std_work_days
			  ,A.ea_holidays
			  ,A.ea_weekdays_work
			  ,A.ea_holidays_work
			  ,A.ea_work_overtime
			  ,A.ea_actual_work_days
			  ,A.ea_base_time
			  ,A.ea_absent_days
			  ,A.ea_annual_leave
			  ,A.ea_summer_holidays
			  ,A.ea_cc_leave
			  ,A.ea_education
			  ,A.ea_sick_leave
			  ,FORMAT(A.ea_std_trans_fee, 0) as ea_std_trans_fee 
			  ,FORMAT(A.ea_trans_fee, 0) as ea_trans_fee
			  ,A.ea_etc
			  ,A.ea_etc_memo
			  ,A.regist_de
		  from tb_emp_attandance_month A, tb_code B, tb_empl_manage C, tb_orgnzt_manage D
		  where A.ea_yy    = #{ea_yy} 
		    and A.ea_mm    = #{ea_mm}
		    and A.dty_code = B.c_code 
		    and A.ea_em_no = C.em_no
		    and A.bhf_code = D.om_code
		    and A.bhf_code <> '05262'
	]]>  
		    <!-- M20180117 M20180118 k2s 퇴사대상자가 포함한 월은 퇴사자의 사원근무실적이 조회 될 수 있어야 함 다사마케팅(전동국과장) 요청 -->
            <![CDATA[
		    and (C.use_at ='Y' or (C.use_at ='N' and substr(C.em_retire_de,1,6) between concat(#{ea_yy},#{ea_mm}) and date_format(now(), '%Y%m'))
		                       or (C.use_at ='N' and substr(C.em_retire_de,1,6) > date_format(now(), '%Y%m'))
		         )
	       ]]>
		   and A.ea_em_nm not in ('순회일','순회이','고정일','고정이')  <!-- k2s 임의의 사원으로 '순회일','순회이','고정일','고정이'는 예외처리 함  -->
		    
		   <if test="cm_code != null and !cm_code.equals('')">
		   and A.cm_code = #{cm_code}
		   </if>
		   <if test="bhf_code != null and !bhf_code.equals('')">
		   and A.bhf_code = #{bhf_code}
		   </if>
		   <if test="dty_code != null and !dty_code.equals('')">
		   and A.dty_code = #{dty_code}
		   </if>
		   <if test="ea_em_no != null and !ea_em_no.equals('')">
		   and C.em_id = #{ea_em_no}
		   </if>
		   <if test="ea_em_nm != null and !ea_em_nm.equals('')">
		   and ea_em_nm like '%${ea_em_nm}%'
		   </if>
		  order by bhf_name, dty_code desc, em_ecny_de, ea_em_nm <!-- M20161201 k2s 정렬순서 수정 지점, 직무(팀장, 순회, 고정), 입사일자 순 -->    
    </select>          

    <update id="sp_summary_emp_attandance_month"   parameterType="String" statementType="CALLABLE">
        {call sp_summary_emp_attandance_month(
        	  	#{_parameter          , mode=IN, jdbcType=VARCHAR, javaType=string}
        )}
    </update>       
</mapper>